//import org.gradle.api.plugins.internal.DefaultJavaPluginExtension

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    // check dependency updates: ./gradlew dependencyUpdates -Drevision=release
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {
    compile 'org.apache.commons:commons-compress:1.19'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.xerial:sqlite-jdbc:3.28.0'
    compile 'com.beust:jcommander:1.78'
    compile 'joda-time:joda-time:2.10.5'
    compile 'net.sf.jchart2d:jchart2d:3.3.2'
    compile 'org.hdrhistogram:HdrHistogram:2.1.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    compile 'net.jcip:jcip-annotations:1.0'
    compile 'org.apache.commons:commons-math3:3.6.1'
    compile 'com.healthmarketscience.jackcess:jackcess:3.0.1'
    testCompile 'junit:junit:4.12'
    compileOnly 'org.projectlombok:lombok:1.18.10'
    annotationProcessor 'org.projectlombok:lombok:1.18.10'
    compile group: 'com.opencsv', name: 'opencsv', version: '5.0'

}

group = 'nl.rabobank.gict.pcc.os-lograter'
version = '1.3.1-SNAPSHOT'
description = 'LogRater'
sourceCompatibility = '1.8'

compileJava {
    options.encoding = "UTF-8"
}
javadoc {
    options.encoding = "UTF-8"
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'nl.stokpop.lograter.LogRater'
    }
    archiveBaseName = 'lograter-exec'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }
    repositories {
        maven {
            def snapshotsRepoUrl = project.property("nexus.snapshots.repository")
            def releasesRepoUrl = project.property("nexus.releases.repository")
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            println "maven url:" + url;
            credentials {
                username = project.property("nexus.repository.username")
                password = project.property("nexus.repository.password")
            }
        }
    }
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

if (project.hasProperty('release')) {

    subprojects {

        task javadocJar(type: Jar) {
            archiveClassifier = 'javadoc'
            from javadoc
        }

        task sourcesJar(type: Jar) {
            archiveClassifier = 'sources'
            from sourceSets.main.allSource
        }

        artifacts {
            archives javadocJar, sourcesJar
        }
    }
}

processResources {
    def props=["version":version]
    filesMatching('lograter.properties') {
        expand(props)
    }
}




